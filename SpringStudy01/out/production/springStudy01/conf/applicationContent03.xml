<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd">

    <bean id="carNew" class="bean.CarNew">
        <property name="carName" value="宝马"></property>
        <property name="color" value="白色"></property>
    </bean>

    <bean id="carNew01" class="bean.CarNew">
        <property name="carName" value="宝马01"></property>
        <property name="color" value="白色01"></property>
    </bean>

    <!-- 为Person里面的自定义类似的属性赋值，Property：手动赋值
        自动赋值（自动装配）：
        自动装配
        autowire="default/no":不自动装配，不自动为car赋值
        autowire="byName""：按照名字；
            private Car car;以属性名作为id去容器中找到这个组件，给他赋值
        autowire="byType":
            private CarNew carNew;
                以属性的类型作为查找依据去容器中找到这个组件
                carNew = ioc.getBean(CarNew.class);
                1)、以属性的类型作为查找依据去容器中找到这个组件；如果容器中有多个类型组件报错
                2)、没找到？装配null
     -->
    <bean id="person" class="bean.PersonNew" autowire="byType">
        <!-- 字面两：#{} -->
        <property name="salary" value="#{123.23*12}"></property>
        <!-- 引用其他bean的某个属性值 -->
        <property name="lastName" value="#{bookNew01.bookName}"></property>
        <!-- 引用其他bean -->
        <property name="carNew" value="#{carNew}"></property>
    </bean>

    <bean id="bookNew01" class="bean.BookNew">
        <property name="bookName" value="book01"></property>
    </bean>

    <bean id="bookNew02" class="bean.BookNew">
        <property name="bookName" value="book02"></property>
    </bean>

    <bean id="bookNew03" class="bean.BookNew">
        <property name="bookName" value="book03"></property>
    </bean>
</beans>